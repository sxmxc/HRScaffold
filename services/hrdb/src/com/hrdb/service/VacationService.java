/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/

package com.hrdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.hrdb.Vacation;

/**
 * Service object for domain model class Vacation.
 *
 * @see {@link Vacation}
 */
public interface VacationService {

    /**
     * Creates a new Vacation.
     *
     * @param vacation The information of the created CompositeTable.
     * @return The created Vacation.
     */
	Vacation create(Vacation vacation);


	/**
	 * Finds Vacation by id.
	 *
	 * @param vacationId The id of the wanted Vacation.
	 * @return The found Vacation. If no Vacation is found, this method returns null.
	 */
	Vacation getById(Integer vacationId) throws EntityNotFoundException;

	/**
	 * Updates the information of a Vacation.
	 *
	 * @param vacation The information of the updated Vacation.
	 * @return The updated Vacation.
     *
	 * @throws EntityNotFoundException if no Vacation is found with given id.
	 */
	Vacation update(Vacation vacation) throws EntityNotFoundException;

    /**
	 * Deletes a Vacation.
	 *
	 * @param vacationId The id of the deleted Vacation.
	 * @return The deleted Vacation.
     *
	 * @throws EntityNotFoundException if no Vacation is found with the given id.
	 */
	Vacation delete(Integer vacationId) throws EntityNotFoundException;

	/**
	 * Finds all Vacations.
	 *
	 * @return A list of Vacations.
	 */
    @Deprecated
	Page<Vacation> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all Vacations.
	 * @return A list of Vacations.
	 */
    Page<Vacation> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Vacations in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the Vacation.
	 */
	long count(String query);

    Page<Vacation> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

