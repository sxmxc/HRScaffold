/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.hr_scaffold.hr.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.hr_scaffold.hr.Candidates;
import com.hr_scaffold.hr.Interviews;


/**
 * ServiceImpl object for domain model class Candidates.
 *
 * @see Candidates
 */
@Service("HR.CandidatesService")
public class CandidatesServiceImpl implements CandidatesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CandidatesServiceImpl.class);

    @Autowired
	@Qualifier("HR.InterviewsService")
	private InterviewsService interviewsService;

    @Autowired
    @Qualifier("HR.CandidatesDao")
    private WMGenericDao<Candidates, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Candidates, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "HRTransactionManager")
    @Override
	public Candidates create(Candidates candidates) {
        LOGGER.debug("Creating a new Candidates with information: {}", candidates);
        Candidates candidatesCreated = this.wmGenericDao.create(candidates);
        if(candidatesCreated.getInterviewses() != null) {
            for(Interviews interviewse : candidatesCreated.getInterviewses()) {
                interviewse.setCandidates(candidatesCreated);
                LOGGER.debug("Creating a new child Interviews with information: {}", interviewse);
                interviewsService.create(interviewse);
            }
        }
        return candidatesCreated;
    }

	@Transactional(readOnly = true, value = "HRTransactionManager")
	@Override
	public Candidates getById(Integer candidatesId) throws EntityNotFoundException {
        LOGGER.debug("Finding Candidates by id: {}", candidatesId);
        Candidates candidates = this.wmGenericDao.findById(candidatesId);
        if (candidates == null){
            LOGGER.debug("No Candidates found with id: {}", candidatesId);
            throw new EntityNotFoundException(String.valueOf(candidatesId));
        }
        return candidates;
    }

    @Transactional(readOnly = true, value = "HRTransactionManager")
	@Override
	public Candidates findById(Integer candidatesId) {
        LOGGER.debug("Finding Candidates by id: {}", candidatesId);
        return this.wmGenericDao.findById(candidatesId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "HRTransactionManager")
	@Override
	public Candidates update(Candidates candidates) throws EntityNotFoundException {
        LOGGER.debug("Updating Candidates with information: {}", candidates);
        this.wmGenericDao.update(candidates);

        Integer candidatesId = candidates.getId();

        return this.wmGenericDao.findById(candidatesId);
    }

    @Transactional(value = "HRTransactionManager")
	@Override
	public Candidates delete(Integer candidatesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Candidates with id: {}", candidatesId);
        Candidates deleted = this.wmGenericDao.findById(candidatesId);
        if (deleted == null) {
            LOGGER.debug("No Candidates found with id: {}", candidatesId);
            throw new EntityNotFoundException(String.valueOf(candidatesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "HRTransactionManager")
	@Override
	public Page<Candidates> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Candidates");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "HRTransactionManager")
    @Override
    public Page<Candidates> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Candidates");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "HRTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service HR for table Candidates to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "HRTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "HRTransactionManager")
    @Override
    public Page<Interviews> findAssociatedInterviewses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated interviewses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("candidates.id = '" + id + "'");

        return interviewsService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service InterviewsService instance
	 */
	protected void setInterviewsService(InterviewsService service) {
        this.interviewsService = service;
    }

}

