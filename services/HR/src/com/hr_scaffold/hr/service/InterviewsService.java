/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.hr_scaffold.hr.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.hr_scaffold.hr.Interviews;

/**
 * Service object for domain model class {@link Interviews}.
 */
public interface InterviewsService {

    /**
     * Creates a new Interviews. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Interviews if any.
     *
     * @param interviews Details of the Interviews to be created; value cannot be null.
     * @return The newly created Interviews.
     */
	Interviews create(Interviews interviews);


	/**
	 * Returns Interviews by given id if exists.
	 *
	 * @param interviewsId The id of the Interviews to get; value cannot be null.
	 * @return Interviews associated with the given interviewsId.
     * @throws EntityNotFoundException If no Interviews is found.
	 */
	Interviews getById(Integer interviewsId) throws EntityNotFoundException;

    /**
	 * Find and return the Interviews by given id if exists, returns null otherwise.
	 *
	 * @param interviewsId The id of the Interviews to get; value cannot be null.
	 * @return Interviews associated with the given interviewsId.
	 */
	Interviews findById(Integer interviewsId);


	/**
	 * Updates the details of an existing Interviews. It replaces all fields of the existing Interviews with the given interviews.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on Interviews if any.
     *
	 * @param interviews The details of the Interviews to be updated; value cannot be null.
	 * @return The updated Interviews.
	 * @throws EntityNotFoundException if no Interviews is found with given input.
	 */
	Interviews update(Interviews interviews) throws EntityNotFoundException;

    /**
	 * Deletes an existing Interviews with the given id.
	 *
	 * @param interviewsId The id of the Interviews to be deleted; value cannot be null.
	 * @return The deleted Interviews.
	 * @throws EntityNotFoundException if no Interviews found with the given id.
	 */
	Interviews delete(Integer interviewsId) throws EntityNotFoundException;

	/**
	 * Find all Interviews matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Interviews.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<Interviews> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all Interviews matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Interviews.
     *
     * @see Pageable
     * @see Page
	 */
    Page<Interviews> findAll(String query, Pageable pageable);

    /**
	 * Exports all Interviews matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Interviews in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the Interviews.
	 */
	long count(String query);


}

