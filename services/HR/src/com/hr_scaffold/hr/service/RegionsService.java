/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.hr_scaffold.hr.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.hr_scaffold.hr.Employees;
import com.hr_scaffold.hr.Regions;
import com.hr_scaffold.hr.Users;

/**
 * Service object for domain model class {@link Regions}.
 */
public interface RegionsService {

    /**
     * Creates a new Regions. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Regions if any.
     *
     * @param regions Details of the Regions to be created; value cannot be null.
     * @return The newly created Regions.
     */
	Regions create(Regions regions);


	/**
	 * Returns Regions by given id if exists.
	 *
	 * @param regionsId The id of the Regions to get; value cannot be null.
	 * @return Regions associated with the given regionsId.
     * @throws EntityNotFoundException If no Regions is found.
	 */
	Regions getById(Integer regionsId) throws EntityNotFoundException;

    /**
	 * Find and return the Regions by given id if exists, returns null otherwise.
	 *
	 * @param regionsId The id of the Regions to get; value cannot be null.
	 * @return Regions associated with the given regionsId.
	 */
	Regions findById(Integer regionsId);


	/**
	 * Updates the details of an existing Regions. It replaces all fields of the existing Regions with the given regions.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on Regions if any.
     *
	 * @param regions The details of the Regions to be updated; value cannot be null.
	 * @return The updated Regions.
	 * @throws EntityNotFoundException if no Regions is found with given input.
	 */
	Regions update(Regions regions) throws EntityNotFoundException;

    /**
	 * Deletes an existing Regions with the given id.
	 *
	 * @param regionsId The id of the Regions to be deleted; value cannot be null.
	 * @return The deleted Regions.
	 * @throws EntityNotFoundException if no Regions found with the given id.
	 */
	Regions delete(Integer regionsId) throws EntityNotFoundException;

	/**
	 * Find all Regions matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Regions.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<Regions> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all Regions matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Regions.
     *
     * @see Pageable
     * @see Page
	 */
    Page<Regions> findAll(String query, Pageable pageable);

    /**
	 * Exports all Regions matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Regions in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the Regions.
	 */
	long count(String query);

    /*
     * Returns the associated employeeses for given Regions id.
     *
     * @param regionid value of regionid; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Employees instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Employees> findAssociatedEmployeeses(Integer regionid, Pageable pageable);

    /*
     * Returns the associated userses for given Regions id.
     *
     * @param regionid value of regionid; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Users instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Users> findAssociatedUserses(Integer regionid, Pageable pageable);

}

