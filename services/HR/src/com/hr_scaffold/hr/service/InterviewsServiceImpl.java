/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.hr_scaffold.hr.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.hr_scaffold.hr.Interviews;


/**
 * ServiceImpl object for domain model class Interviews.
 *
 * @see Interviews
 */
@Service("HR.InterviewsService")
public class InterviewsServiceImpl implements InterviewsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(InterviewsServiceImpl.class);


    @Autowired
    @Qualifier("HR.InterviewsDao")
    private WMGenericDao<Interviews, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Interviews, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "HRTransactionManager")
    @Override
	public Interviews create(Interviews interviews) {
        LOGGER.debug("Creating a new Interviews with information: {}", interviews);
        Interviews interviewsCreated = this.wmGenericDao.create(interviews);
        return interviewsCreated;
    }

	@Transactional(readOnly = true, value = "HRTransactionManager")
	@Override
	public Interviews getById(Integer interviewsId) throws EntityNotFoundException {
        LOGGER.debug("Finding Interviews by id: {}", interviewsId);
        Interviews interviews = this.wmGenericDao.findById(interviewsId);
        if (interviews == null){
            LOGGER.debug("No Interviews found with id: {}", interviewsId);
            throw new EntityNotFoundException(String.valueOf(interviewsId));
        }
        return interviews;
    }

    @Transactional(readOnly = true, value = "HRTransactionManager")
	@Override
	public Interviews findById(Integer interviewsId) {
        LOGGER.debug("Finding Interviews by id: {}", interviewsId);
        return this.wmGenericDao.findById(interviewsId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "HRTransactionManager")
	@Override
	public Interviews update(Interviews interviews) throws EntityNotFoundException {
        LOGGER.debug("Updating Interviews with information: {}", interviews);
        this.wmGenericDao.update(interviews);

        Integer interviewsId = interviews.getId();

        return this.wmGenericDao.findById(interviewsId);
    }

    @Transactional(value = "HRTransactionManager")
	@Override
	public Interviews delete(Integer interviewsId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Interviews with id: {}", interviewsId);
        Interviews deleted = this.wmGenericDao.findById(interviewsId);
        if (deleted == null) {
            LOGGER.debug("No Interviews found with id: {}", interviewsId);
            throw new EntityNotFoundException(String.valueOf(interviewsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "HRTransactionManager")
	@Override
	public Page<Interviews> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Interviews");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "HRTransactionManager")
    @Override
    public Page<Interviews> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Interviews");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "HRTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service HR for table Interviews to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "HRTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }



}

