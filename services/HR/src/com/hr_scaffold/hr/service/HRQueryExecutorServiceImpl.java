/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/

package com.hr_scaffold.hr.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.query.WMQueryExecutor;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.file.model.Downloadable;

import com.hr_scaffold.hr.models.query.*;

@Service
public class HRQueryExecutorServiceImpl implements HRQueryExecutorService {

    private static final Logger LOGGER = LoggerFactory.getLogger(HRQueryExecutorServiceImpl.class);

    @Autowired
    @Qualifier("HRWMQueryExecutor")
    private WMQueryExecutor queryExecutor;

    @Transactional(readOnly = true, value = "HRTransactionManager")
    @Override
    public Page<CountInRegionResponse> executeCountInRegion(Integer region, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("region", region);

        return queryExecutor.executeNamedQuery("countInRegion", params, CountInRegionResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "HRTransactionManager")
    @Override
    public Downloadable exportCountInRegion(ExportType exportType, Integer region, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("region", region);

        return queryExecutor.exportNamedQueryData("countInRegion", params, exportType, CountInRegionResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "HRTransactionManager")
    @Override
    public Page<EmployeesByDepartmentResponse> executeEmployeesByDepartment(String deptid, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("deptid", deptid);

        return queryExecutor.executeNamedQuery("EmployeesByDepartment", params, EmployeesByDepartmentResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "HRTransactionManager")
    @Override
    public Downloadable exportEmployeesByDepartment(ExportType exportType, String deptid, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("deptid", deptid);

        return queryExecutor.exportNamedQueryData("EmployeesByDepartment", params, exportType, EmployeesByDepartmentResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "HRTransactionManager")
    @Override
    public GetRegionResponse executeGetRegion(String username) {
        Map params = new HashMap(1);

        params.put("username", username);

        return queryExecutor.executeNamedQuery("getRegion", params, GetRegionResponse.class);
    }

    @Transactional(readOnly = true, value = "HRTransactionManager")
    @Override
    public Page<EmployeesByRegionResponse> executeEmployeesByRegion(Integer regionid, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("regionid", regionid);

        return queryExecutor.executeNamedQuery("EmployeesByRegion", params, EmployeesByRegionResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "HRTransactionManager")
    @Override
    public Downloadable exportEmployeesByRegion(ExportType exportType, Integer regionid, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("regionid", regionid);

        return queryExecutor.exportNamedQueryData("EmployeesByRegion", params, exportType, EmployeesByRegionResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "HRTransactionManager")
    @Override
    public Page<GetEmployeesByStatusResponse> executeGetEmployeesByStatus(String status, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("status", status);

        return queryExecutor.executeNamedQuery("getEmployeesByStatus", params, GetEmployeesByStatusResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "HRTransactionManager")
    @Override
    public Downloadable exportGetEmployeesByStatus(ExportType exportType, String status, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("status", status);

        return queryExecutor.exportNamedQueryData("getEmployeesByStatus", params, exportType, GetEmployeesByStatusResponse.class, pageable);
    }

}


