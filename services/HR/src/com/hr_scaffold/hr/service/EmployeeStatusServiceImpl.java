/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.hr_scaffold.hr.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.hr_scaffold.hr.EmployeeStatus;
import com.hr_scaffold.hr.Employees;


/**
 * ServiceImpl object for domain model class EmployeeStatus.
 *
 * @see EmployeeStatus
 */
@Service("HR.EmployeeStatusService")
public class EmployeeStatusServiceImpl implements EmployeeStatusService {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeeStatusServiceImpl.class);

    @Autowired
	@Qualifier("HR.EmployeesService")
	private EmployeesService employeesService;

    @Autowired
    @Qualifier("HR.EmployeeStatusDao")
    private WMGenericDao<EmployeeStatus, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<EmployeeStatus, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "HRTransactionManager")
    @Override
	public EmployeeStatus create(EmployeeStatus employeeStatus) {
        LOGGER.debug("Creating a new EmployeeStatus with information: {}", employeeStatus);
        EmployeeStatus employeeStatusCreated = this.wmGenericDao.create(employeeStatus);
        if(employeeStatusCreated.getEmployeeses() != null) {
            for(Employees employeese : employeeStatusCreated.getEmployeeses()) {
                employeese.setEmployeeStatus(employeeStatusCreated);
                LOGGER.debug("Creating a new child Employees with information: {}", employeese);
                employeesService.create(employeese);
            }
        }
        return employeeStatusCreated;
    }

	@Transactional(readOnly = true, value = "HRTransactionManager")
	@Override
	public EmployeeStatus getById(Integer employeestatusId) throws EntityNotFoundException {
        LOGGER.debug("Finding EmployeeStatus by id: {}", employeestatusId);
        EmployeeStatus employeeStatus = this.wmGenericDao.findById(employeestatusId);
        if (employeeStatus == null){
            LOGGER.debug("No EmployeeStatus found with id: {}", employeestatusId);
            throw new EntityNotFoundException(String.valueOf(employeestatusId));
        }
        return employeeStatus;
    }

    @Transactional(readOnly = true, value = "HRTransactionManager")
	@Override
	public EmployeeStatus findById(Integer employeestatusId) {
        LOGGER.debug("Finding EmployeeStatus by id: {}", employeestatusId);
        return this.wmGenericDao.findById(employeestatusId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "HRTransactionManager")
	@Override
	public EmployeeStatus update(EmployeeStatus employeeStatus) throws EntityNotFoundException {
        LOGGER.debug("Updating EmployeeStatus with information: {}", employeeStatus);
        this.wmGenericDao.update(employeeStatus);

        Integer employeestatusId = employeeStatus.getStatusid();

        return this.wmGenericDao.findById(employeestatusId);
    }

    @Transactional(value = "HRTransactionManager")
	@Override
	public EmployeeStatus delete(Integer employeestatusId) throws EntityNotFoundException {
        LOGGER.debug("Deleting EmployeeStatus with id: {}", employeestatusId);
        EmployeeStatus deleted = this.wmGenericDao.findById(employeestatusId);
        if (deleted == null) {
            LOGGER.debug("No EmployeeStatus found with id: {}", employeestatusId);
            throw new EntityNotFoundException(String.valueOf(employeestatusId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "HRTransactionManager")
	@Override
	public Page<EmployeeStatus> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all EmployeeStatuses");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "HRTransactionManager")
    @Override
    public Page<EmployeeStatus> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all EmployeeStatuses");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "HRTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service HR for table EmployeeStatus to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "HRTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "HRTransactionManager")
    @Override
    public Page<Employees> findAssociatedEmployeeses(Integer statusid, Pageable pageable) {
        LOGGER.debug("Fetching all associated employeeses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("employeeStatus.statusid = '" + statusid + "'");

        return employeesService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EmployeesService instance
	 */
	protected void setEmployeesService(EmployeesService service) {
        this.employeesService = service;
    }

}

