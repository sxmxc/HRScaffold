/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.hr_scaffold.hr.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.hr_scaffold.hr.Users;

/**
 * Service object for domain model class {@link Users}.
 */
public interface UsersService {

    /**
     * Creates a new Users. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Users if any.
     *
     * @param users Details of the Users to be created; value cannot be null.
     * @return The newly created Users.
     */
	Users create(Users users);


	/**
	 * Returns Users by given id if exists.
	 *
	 * @param usersId The id of the Users to get; value cannot be null.
	 * @return Users associated with the given usersId.
     * @throws EntityNotFoundException If no Users is found.
	 */
	Users getById(Integer usersId) throws EntityNotFoundException;

    /**
	 * Find and return the Users by given id if exists, returns null otherwise.
	 *
	 * @param usersId The id of the Users to get; value cannot be null.
	 * @return Users associated with the given usersId.
	 */
	Users findById(Integer usersId);


	/**
	 * Updates the details of an existing Users. It replaces all fields of the existing Users with the given users.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on Users if any.
     *
	 * @param users The details of the Users to be updated; value cannot be null.
	 * @return The updated Users.
	 * @throws EntityNotFoundException if no Users is found with given input.
	 */
	Users update(Users users) throws EntityNotFoundException;

    /**
	 * Deletes an existing Users with the given id.
	 *
	 * @param usersId The id of the Users to be deleted; value cannot be null.
	 * @return The deleted Users.
	 * @throws EntityNotFoundException if no Users found with the given id.
	 */
	Users delete(Integer usersId) throws EntityNotFoundException;

	/**
	 * Find all Users matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Users.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<Users> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all Users matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Users.
     *
     * @see Pageable
     * @see Page
	 */
    Page<Users> findAll(String query, Pageable pageable);

    /**
	 * Exports all Users matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Users in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the Users.
	 */
	long count(String query);


}

