/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.hr_scaffold.hr.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.hr_scaffold.hr.Candidates;
import com.hr_scaffold.hr.Interviews;

/**
 * Service object for domain model class {@link Candidates}.
 */
public interface CandidatesService {

    /**
     * Creates a new Candidates. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Candidates if any.
     *
     * @param candidates Details of the Candidates to be created; value cannot be null.
     * @return The newly created Candidates.
     */
	Candidates create(Candidates candidates);


	/**
	 * Returns Candidates by given id if exists.
	 *
	 * @param candidatesId The id of the Candidates to get; value cannot be null.
	 * @return Candidates associated with the given candidatesId.
     * @throws EntityNotFoundException If no Candidates is found.
	 */
	Candidates getById(Integer candidatesId) throws EntityNotFoundException;

    /**
	 * Find and return the Candidates by given id if exists, returns null otherwise.
	 *
	 * @param candidatesId The id of the Candidates to get; value cannot be null.
	 * @return Candidates associated with the given candidatesId.
	 */
	Candidates findById(Integer candidatesId);


	/**
	 * Updates the details of an existing Candidates. It replaces all fields of the existing Candidates with the given candidates.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on Candidates if any.
     *
	 * @param candidates The details of the Candidates to be updated; value cannot be null.
	 * @return The updated Candidates.
	 * @throws EntityNotFoundException if no Candidates is found with given input.
	 */
	Candidates update(Candidates candidates) throws EntityNotFoundException;

    /**
	 * Deletes an existing Candidates with the given id.
	 *
	 * @param candidatesId The id of the Candidates to be deleted; value cannot be null.
	 * @return The deleted Candidates.
	 * @throws EntityNotFoundException if no Candidates found with the given id.
	 */
	Candidates delete(Integer candidatesId) throws EntityNotFoundException;

	/**
	 * Find all Candidates matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Candidates.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<Candidates> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all Candidates matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Candidates.
     *
     * @see Pageable
     * @see Page
	 */
    Page<Candidates> findAll(String query, Pageable pageable);

    /**
	 * Exports all Candidates matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Candidates in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the Candidates.
	 */
	long count(String query);

    /*
     * Returns the associated interviewses for given Candidates id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Interviews instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Interviews> findAssociatedInterviewses(Integer id, Pageable pageable);

}

