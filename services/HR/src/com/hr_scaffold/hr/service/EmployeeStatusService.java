/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.hr_scaffold.hr.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.hr_scaffold.hr.EmployeeStatus;
import com.hr_scaffold.hr.Employees;

/**
 * Service object for domain model class {@link EmployeeStatus}.
 */
public interface EmployeeStatusService {

    /**
     * Creates a new EmployeeStatus. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on EmployeeStatus if any.
     *
     * @param employeeStatus Details of the EmployeeStatus to be created; value cannot be null.
     * @return The newly created EmployeeStatus.
     */
	EmployeeStatus create(EmployeeStatus employeeStatus);


	/**
	 * Returns EmployeeStatus by given id if exists.
	 *
	 * @param employeestatusId The id of the EmployeeStatus to get; value cannot be null.
	 * @return EmployeeStatus associated with the given employeestatusId.
     * @throws EntityNotFoundException If no EmployeeStatus is found.
	 */
	EmployeeStatus getById(Integer employeestatusId) throws EntityNotFoundException;

    /**
	 * Find and return the EmployeeStatus by given id if exists, returns null otherwise.
	 *
	 * @param employeestatusId The id of the EmployeeStatus to get; value cannot be null.
	 * @return EmployeeStatus associated with the given employeestatusId.
	 */
	EmployeeStatus findById(Integer employeestatusId);


	/**
	 * Updates the details of an existing EmployeeStatus. It replaces all fields of the existing EmployeeStatus with the given employeeStatus.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on EmployeeStatus if any.
     *
	 * @param employeeStatus The details of the EmployeeStatus to be updated; value cannot be null.
	 * @return The updated EmployeeStatus.
	 * @throws EntityNotFoundException if no EmployeeStatus is found with given input.
	 */
	EmployeeStatus update(EmployeeStatus employeeStatus) throws EntityNotFoundException;

    /**
	 * Deletes an existing EmployeeStatus with the given id.
	 *
	 * @param employeestatusId The id of the EmployeeStatus to be deleted; value cannot be null.
	 * @return The deleted EmployeeStatus.
	 * @throws EntityNotFoundException if no EmployeeStatus found with the given id.
	 */
	EmployeeStatus delete(Integer employeestatusId) throws EntityNotFoundException;

	/**
	 * Find all EmployeeStatuses matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching EmployeeStatuses.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<EmployeeStatus> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all EmployeeStatuses matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching EmployeeStatuses.
     *
     * @see Pageable
     * @see Page
	 */
    Page<EmployeeStatus> findAll(String query, Pageable pageable);

    /**
	 * Exports all EmployeeStatuses matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the EmployeeStatuses in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the EmployeeStatus.
	 */
	long count(String query);

    /*
     * Returns the associated employeeses for given EmployeeStatus id.
     *
     * @param statusid value of statusid; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Employees instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Employees> findAssociatedEmployeeses(Integer statusid, Pageable pageable);

}

