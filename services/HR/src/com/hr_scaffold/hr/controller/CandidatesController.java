/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.hr_scaffold.hr.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/



import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.hr_scaffold.hr.Candidates;
import com.hr_scaffold.hr.Interviews;
import com.hr_scaffold.hr.service.CandidatesService;


/**
 * Controller object for domain model class Candidates.
 * @see Candidates
 */
@RestController("HR.CandidatesController")
@Api(value = "CandidatesController", description = "Exposes APIs to work with Candidates resource.")
@RequestMapping("/HR/Candidates")
public class CandidatesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CandidatesController.class);

    @Autowired
	@Qualifier("HR.CandidatesService")
	private CandidatesService candidatesService;

	@ApiOperation(value = "Creates a new Candidates instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Candidates createCandidates(@RequestBody Candidates candidates) {
		LOGGER.debug("Create Candidates with information: {}" , candidates);

		candidates = candidatesService.create(candidates);
		LOGGER.debug("Created Candidates with information: {}" , candidates);

	    return candidates;
	}


    @ApiOperation(value = "Returns the Candidates instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Candidates getCandidates(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Candidates with id: {}" , id);

        Candidates foundCandidates = candidatesService.getById(id);
        LOGGER.debug("Candidates details with id: {}" , foundCandidates);

        return foundCandidates;
    }

    @ApiOperation(value = "Updates the Candidates instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Candidates editCandidates(@PathVariable("id") Integer id, @RequestBody Candidates candidates) throws EntityNotFoundException {
        LOGGER.debug("Editing Candidates with id: {}" , candidates.getId());

        candidates.setId(id);
        candidates = candidatesService.update(candidates);
        LOGGER.debug("Candidates details with id: {}" , candidates);

        return candidates;
    }

    @ApiOperation(value = "Deletes the Candidates instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteCandidates(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Candidates with id: {}" , id);

        Candidates deletedCandidates = candidatesService.delete(id);

        return deletedCandidates != null;
    }

    /**
     * @deprecated Use {@link #findCandidates(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Candidates instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Candidates> searchCandidatesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Candidates list");
        return candidatesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Candidates instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Candidates> findCandidates(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Candidates list");
        return candidatesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Candidates instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Candidates> filterCandidates(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Candidates list");
        return candidatesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCandidates(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return candidatesService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Candidates instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countCandidates( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Candidates");
		return candidatesService.count(query);
	}

    @RequestMapping(value="/{id:.+}/interviewses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the interviewses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Interviews> findAssociatedInterviewses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated interviewses");
        return candidatesService.findAssociatedInterviewses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CandidatesService instance
	 */
	protected void setCandidatesService(CandidatesService service) {
		this.candidatesService = service;
	}

}

