/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.hr_scaffold.hr.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/



import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.hr_scaffold.hr.Interviews;
import com.hr_scaffold.hr.service.InterviewsService;


/**
 * Controller object for domain model class Interviews.
 * @see Interviews
 */
@RestController("HR.InterviewsController")
@Api(value = "InterviewsController", description = "Exposes APIs to work with Interviews resource.")
@RequestMapping("/HR/Interviews")
public class InterviewsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(InterviewsController.class);

    @Autowired
	@Qualifier("HR.InterviewsService")
	private InterviewsService interviewsService;

	@ApiOperation(value = "Creates a new Interviews instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Interviews createInterviews(@RequestBody Interviews interviews) {
		LOGGER.debug("Create Interviews with information: {}" , interviews);

		interviews = interviewsService.create(interviews);
		LOGGER.debug("Created Interviews with information: {}" , interviews);

	    return interviews;
	}


    @ApiOperation(value = "Returns the Interviews instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Interviews getInterviews(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Interviews with id: {}" , id);

        Interviews foundInterviews = interviewsService.getById(id);
        LOGGER.debug("Interviews details with id: {}" , foundInterviews);

        return foundInterviews;
    }

    @ApiOperation(value = "Updates the Interviews instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Interviews editInterviews(@PathVariable("id") Integer id, @RequestBody Interviews interviews) throws EntityNotFoundException {
        LOGGER.debug("Editing Interviews with id: {}" , interviews.getId());

        interviews.setId(id);
        interviews = interviewsService.update(interviews);
        LOGGER.debug("Interviews details with id: {}" , interviews);

        return interviews;
    }

    @ApiOperation(value = "Deletes the Interviews instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteInterviews(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Interviews with id: {}" , id);

        Interviews deletedInterviews = interviewsService.delete(id);

        return deletedInterviews != null;
    }

    /**
     * @deprecated Use {@link #findInterviews(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Interviews instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Interviews> searchInterviewsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Interviews list");
        return interviewsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Interviews instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Interviews> findInterviews(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Interviews list");
        return interviewsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Interviews instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Interviews> filterInterviews(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Interviews list");
        return interviewsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportInterviews(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return interviewsService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Interviews instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countInterviews( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Interviews");
		return interviewsService.count(query);
	}


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service InterviewsService instance
	 */
	protected void setInterviewsService(InterviewsService service) {
		this.interviewsService = service;
	}

}

