/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.hr_scaffold.hr.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.hr_scaffold.hr.Employees;
import com.hr_scaffold.hr.service.EmployeesService;

/**
 * Controller object for domain model class Employees.
 * @see Employees
 */
@RestController("HR.EmployeesController")
@Api(value = "EmployeesController", description = "Exposes APIs to work with Employees resource.")
@RequestMapping("/HR/Employees")
public class EmployeesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeesController.class);

    @Autowired
    @Qualifier("HR.EmployeesService")
    private EmployeesService employeesService;

    @ApiOperation(value = "Creates a new Employees instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Employees createEmployees(@RequestBody Employees employees) {
        LOGGER.debug("Create Employees with information: {}", employees);
        employees = employeesService.create(employees);
        LOGGER.debug("Created Employees with information: {}", employees);
        return employees;
    }

    @ApiOperation(value = "Returns the Employees instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Employees getEmployees(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Employees with id: {}", id);
        Employees foundEmployees = employeesService.getById(id);
        LOGGER.debug("Employees details with id: {}", foundEmployees);
        return foundEmployees;
    }

    @ApiOperation(value = "Updates the Employees instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Employees editEmployees(@PathVariable("id") Integer id, @RequestBody Employees employees) throws EntityNotFoundException {
        LOGGER.debug("Editing Employees with id: {}", employees.getEid());
        employees.setEid(id);
        employees = employeesService.update(employees);
        LOGGER.debug("Employees details with id: {}", employees);
        return employees;
    }

    @ApiOperation(value = "Deletes the Employees instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteEmployees(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Employees with id: {}", id);
        Employees deletedEmployees = employeesService.delete(id);
        return deletedEmployees != null;
    }

    /**
     * @deprecated Use {@link #findEmployees(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Employees instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Employees> searchEmployeesByQueryFilters(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Employees list");
        return employeesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the list of Employees instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Employees> findEmployees(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Employees list");
        return employeesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportEmployees(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return employeesService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns the total count of Employees instances.")
    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Long countEmployees(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Employees");
        return employeesService.count(query);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EmployeesService instance
	 */
    protected void setEmployeesService(EmployeesService service) {
        this.employeesService = service;
    }
}
