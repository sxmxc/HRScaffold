/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.hr_scaffold.hr.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/



import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.hr_scaffold.hr.EmployeeStatus;
import com.hr_scaffold.hr.Employees;
import com.hr_scaffold.hr.service.EmployeeStatusService;


/**
 * Controller object for domain model class EmployeeStatus.
 * @see EmployeeStatus
 */
@RestController("HR.EmployeeStatusController")
@Api(value = "EmployeeStatusController", description = "Exposes APIs to work with EmployeeStatus resource.")
@RequestMapping("/HR/EmployeeStatus")
public class EmployeeStatusController {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeeStatusController.class);

    @Autowired
	@Qualifier("HR.EmployeeStatusService")
	private EmployeeStatusService employeeStatusService;

	@ApiOperation(value = "Creates a new EmployeeStatus instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public EmployeeStatus createEmployeeStatus(@RequestBody EmployeeStatus employeeStatus) {
		LOGGER.debug("Create EmployeeStatus with information: {}" , employeeStatus);

		employeeStatus = employeeStatusService.create(employeeStatus);
		LOGGER.debug("Created EmployeeStatus with information: {}" , employeeStatus);

	    return employeeStatus;
	}


    @ApiOperation(value = "Returns the EmployeeStatus instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EmployeeStatus getEmployeeStatus(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting EmployeeStatus with id: {}" , id);

        EmployeeStatus foundEmployeeStatus = employeeStatusService.getById(id);
        LOGGER.debug("EmployeeStatus details with id: {}" , foundEmployeeStatus);

        return foundEmployeeStatus;
    }

    @ApiOperation(value = "Updates the EmployeeStatus instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public EmployeeStatus editEmployeeStatus(@PathVariable("id") Integer id, @RequestBody EmployeeStatus employeeStatus) throws EntityNotFoundException {
        LOGGER.debug("Editing EmployeeStatus with id: {}" , employeeStatus.getStatusid());

        employeeStatus.setStatusid(id);
        employeeStatus = employeeStatusService.update(employeeStatus);
        LOGGER.debug("EmployeeStatus details with id: {}" , employeeStatus);

        return employeeStatus;
    }

    @ApiOperation(value = "Deletes the EmployeeStatus instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteEmployeeStatus(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting EmployeeStatus with id: {}" , id);

        EmployeeStatus deletedEmployeeStatus = employeeStatusService.delete(id);

        return deletedEmployeeStatus != null;
    }

    /**
     * @deprecated Use {@link #findEmployeeStatuses(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of EmployeeStatus instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EmployeeStatus> searchEmployeeStatusesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering EmployeeStatuses list");
        return employeeStatusService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of EmployeeStatus instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EmployeeStatus> findEmployeeStatuses(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering EmployeeStatuses list");
        return employeeStatusService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of EmployeeStatus instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<EmployeeStatus> filterEmployeeStatuses(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering EmployeeStatuses list");
        return employeeStatusService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportEmployeeStatuses(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return employeeStatusService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of EmployeeStatus instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countEmployeeStatuses( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting EmployeeStatuses");
		return employeeStatusService.count(query);
	}

    @RequestMapping(value="/{id:.+}/employeeses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the employeeses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Employees> findAssociatedEmployeeses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated employeeses");
        return employeeStatusService.findAssociatedEmployeeses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EmployeeStatusService instance
	 */
	protected void setEmployeeStatusService(EmployeeStatusService service) {
		this.employeeStatusService = service;
	}

}

